#!/usr/bin/env python3
"""
Fresh extraction script for Sandbox 11 hardcoded values
Outputs clean data to aetherVault/value-mapping/
"""

import re
import json
from pathlib import Path
from typing import Dict, List, Tuple

def extract_hardcoded_values():
    """Extract all hardcoded values from Sandbox 11"""
    
    sandbox_file = Path("apps/web/src/routes/sandboxes/sandbox-11/+page.svelte")
    if not sandbox_file.exists():
        print(f"‚ùå Sandbox 11 not found at {sandbox_file}")
        return None
    
    content = sandbox_file.read_text()
    
    # Patterns for different types of hardcoded values
    patterns = {
        'css_dimensions': r'(\d+(?:\.\d+)?)(px|em|rem|vh|vw|%)\b',
        'css_colors_hex': r'#([0-9a-fA-F]{3,8})\b',
        'css_colors_rgba': r'rgba?\(([^)]+)\)',
        'css_numbers': r'\b(\d+(?:\.\d+)?)\b(?![a-zA-Z%])',
        'string_literals': r'["\']([^"\']{2,})["\']',
        'css_properties': r'([a-z-]+):\s*([^;]+);',
        'javascript_constants': r'const\s+([A-Z_]+)\s*=\s*([^;]+);',
        'object_properties': r'([a-zA-Z]+):\s*([^,}]+)',
    }
    
    results = {
        'file_info': {
            'source_file': str(sandbox_file),
            'extracted_at': 'Generated by fresh extraction script',
            'total_lines': len(content.split('\n'))
        },
        'extracted_values': {},
        'summary': {}
    }
    
    lines = content.split('\n')
    
    for category, pattern in patterns.items():
        matches = []
        
        for line_num, line in enumerate(lines, 1):
            # Skip lines that look like variable references
            if any(indicator in line for indicator in ['var(--', '{', '$state', 'config.', 'import ']):
                continue
                
            for match in re.finditer(pattern, line):
                value = match.group(1) if match.groups() else match.group(0)
                context = line.strip()
                
                matches.append({
                    'value': value,
                    'line_number': line_num,
                    'context': context,
                    'full_match': match.group(0)
                })
        
        if matches:
            results['extracted_values'][category] = matches
            results['summary'][category] = {
                'total_instances': len(matches),
                'unique_values': len(set(item['value'] for item in matches))
            }
    
    # Calculate totals
    total_instances = sum(data['total_instances'] for data in results['summary'].values())
    total_unique = sum(data['unique_values'] for data in results['summary'].values())
    
    results['summary']['totals'] = {
        'total_instances': total_instances,
        'total_unique_values': total_unique,
        'categories': len(results['summary'])
    }
    
    return results

def save_results(results):
    """Save extraction results to value-mapping folder"""
    
    output_dir = Path("aetherVault/value-mapping")
    output_dir.mkdir(exist_ok=True)
    
    # Save complete results
    output_file = output_dir / "sandbox11_extracted_values.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    # Save summary report
    summary_file = output_dir / "extraction_summary.txt"
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write("SANDBOX 11 HARDCODED VALUES EXTRACTION SUMMARY\n")
        f.write("=" * 50 + "\n\n")
        
        summary = results['summary']
        f.write(f"üìÅ Source: {results['file_info']['source_file']}\n")
        f.write(f"üìä Total instances: {summary['totals']['total_instances']}\n")
        f.write(f"üéØ Unique values: {summary['totals']['total_unique_values']}\n")
        f.write(f"üìã Categories: {summary['totals']['categories']}\n\n")
        
        f.write("BREAKDOWN BY CATEGORY:\n")
        f.write("-" * 25 + "\n")
        
        for category, data in summary.items():
            if category != 'totals':
                f.write(f"{category}: {data['total_instances']} instances ({data['unique_values']} unique)\n")
    
    return output_file, summary_file

def main():
    print("üîç Extracting hardcoded values from Sandbox 11...")
    
    results = extract_hardcoded_values()
    if not results:
        return
    
    output_file, summary_file = save_results(results)
    
    print(f"‚úÖ Extraction complete!")
    print(f"üìÑ Full results: {output_file}")
    print(f"üìä Summary: {summary_file}")
    
    # Print quick summary
    summary = results['summary']['totals']
    print(f"\nüéØ Found {summary['total_instances']} hardcoded values ({summary['total_unique_values']} unique)")
    print(f"üìã Across {summary['categories']} categories")

if __name__ == "__main__":
    main()